<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
  <metadata>
    <id>Paulovich.Caju</id>
    <version>0.4.4</version>
    <authors>Ivan Paulovich</authors>
    <owners>Ivan Paulovich</owners>
    <projectUrl>https://github.com/ivanpaulovich/caju</projectUrl>
    <licenseUrl>https://github.com/ivanpaulovich/caju/blob/master/license</licenseUrl>
	<iconUrl>https://raw.githubusercontent.com/ivanpaulovich/caju/master/images/caju-icon.png</iconUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <title>dotnet new clean; dotnet new hexagonal; dotnet new eventsourcing; # awesome architectures!</title>
    <description>
$ dotnet new -i Paulovich.Caju::0.4.4
$ dotnet new clean

It generates a .NET Solution with a layered backend (Domain - Application - Infrastructure - UI) based on the Clean Architecture Style.
    </description>
    <summary>
$ dotnet new clean --use-cases basic
$ dotnet new hexagonal --use-cases readonly
$ dotnet new eventsourcing --use-cases full
    </summary>
    <releaseNotes>
- Architecture style documentation
- Clean, Hexagonal or Event-Sourcing architecture styles
- Entity Framework Core; Dapper; MongoDB Data Access frameworks
- Different sets of use-cases.
- Kafka as service-bus for Event-Sourcing
- WebAPI templates
- Docker images optimized for startup
- Layerd application with Domain, Application, Infrastructure and UI
- Domain-Driven Design (Aggregates, Entities, Value Objects, Commands, Domain Events)
    </releaseNotes>
    <tags>
	  onion
      boilerplate
      solid
      ddd
      clean-architecture
      clean-code
      evolutionary-architecture
      microservices
      hexagonal-architecture
      design-patterns
      docker
      webapi
      domain-driven-design
      mongodb
      kafka
      cqrs
      event-sourcing
      dotnet-new
      generator
      tdd
      event-driven
      templating
      microservice
      dotnet-core
      ddd-architecture
      solid-principles
      aggregate
      bearer-authentication
      cqrs-es
      service-bus
      optimistic-updates
      angular
      typescript
      rest-client
      material-design
      bootstrap
      dotnetcore
      dotnet
      layered
      architecture
	  dotnet-cli
	  dotnet-template
	  wcf
	  console
    </tags>
    <language>en-US</language>
    <packageTypes>
      <packageType name="Template" />
    </packageTypes>
	<dependencies>
	</dependencies>
  </metadata>
  <files>
    <file src="**" exclude="**\bin\**\*;**\obj\**\*;**\*.user;**\*.log;**\.vscode\**\*;" />
  </files>
</package>