<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
  <metadata>
    <id>Paulovich.Caju</id>
    <version>0.1.63</version>
    <authors>Ivan Paulovich</authors>
    <owners>Ivan Paulovich</owners>
    <projectUrl>https://github.com/ivanpaulovich/caju</projectUrl>
    <licenseUrl>https://github.com/ivanpaulovich/caju/blob/master/license</licenseUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <title>dotnet new caju: Templates for Back-end with the awesome architectures made easy! (Hexagonal, Clean or Event Sourcing architectures styles)</title>
    <description>
      At the first time use:

      $ dotnet new -i Paulovich.Caju
      $ dotnet new caju --name "MyProject"

Will be created a "MyProject" folder with a layered backend (Domain - Application - Infrastructure - UI) with the desired architecture style (Hexagonal, Clean or Event Sourcing).
    </description>
    <summary>
      Try the following commands:

      $ dotnet new caju --use-cases basic --name "MyBasicProject"
      $ dotnet new caju --architecture-style hexagonal --name "MyHexagonalProject"
    </summary>
    <releaseNotes>
- Architecture styles support
-- Clean architecture with Input/Output/Interactors
-- Hexagonal architecture with CommandHandlers, Commands and Command Results
-- Event Sourcing with CQRS and Domain Events
- WebAPI
- Docker images optimized for startup
- Mongo.Driver, EntityFramework.Core, Confluent.Kafka or Dapper data access frameworks 
- Layerd application with (Application - Domain - Infrastructure - UI)
- Domain-Driven Design (Aggregates, Entities, Value Objects, Commands, Domain Events)
- Serilog Logging
- UI projects options
    </releaseNotes>
    <tags>
      boilerplate
      solid
      ddd
      clean-architecture
      clean-code
      evolutionary-architecture
      microservices
      hexagonal-architecture
      design-patterns
      docker
      webapi
      domain-driven-design
      mongodb
      kafka
      cqrs
      event-sourcing
      dotnet-new
      generator
      tdd
      event-driven
      templating
      microservice
      dotnet-core
      ddd-architecture
      solid-principles
      aggregate
      bearer-authentication
      cqrs-es
      service-bus
      optimistic-updates
      angular
      typescript
      rest-client
      material-design
      bootstrap
      dotnetcore
      dotnet
      layered
      architecture
    </tags>
    <language>en-US</language>
    <packageTypes>
      <packageType name="Template" />
    </packageTypes>
  </metadata>
  <files>
    <file src="**" exclude="**\bin\**\*;**\obj\**\*;**\*.user;**\*.log;" />
  </files>
</package>